buildscript {
    ext {
        versions_plugin_version = '0.51.0'
        kotlin_version = '2.0.0'
        okio_version = '3.9.0'
        jackson_version = '2.17.1'
        woodstox_version = '7.0.0'
        commons_text = '1.12.0'
        commons_email = '1.6.0'
        velocity = '2.3'
        clikt = '2.8.0'
        slf4j = '2.0.13'
        junit = '4.13.2'
        mockk_version = '1.13.12'
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "com.github.ben-manes.versions" version "$versions_plugin_version"
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "application"
}

version = '2.2-SNAPSHOT'

application {
    mainClass = 'com.munzenberger.feed.AppKt'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.apache.commons:commons-email:$commons_email"
    implementation "org.apache.commons:commons-text:$commons_text"
    implementation "org.apache.velocity:velocity-engine-core:$velocity"
    implementation "com.squareup.okio:okio:$okio_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.woodstox:woodstox-core:$woodstox_version"
    implementation "com.github.ajalt:clikt:$clikt"
    implementation "org.slf4j:slf4j-nop:$slf4j" // needed to prevent messages from velocity

    testImplementation "junit:junit:$junit"
    testImplementation "io.mockk:mockk:$mockk_version"
}

kotlin {
    jvmToolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.register('createProperties') {
    dependsOn processResources
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p.put 'version', project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    // disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}
