plugins {
    id 'java-library'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.apache.commons:commons-email:$commons_email"
    implementation "org.apache.commons:commons-text:$commons_text"
    implementation "org.apache.velocity:velocity-engine-core:$velocity"
    implementation "com.squareup.okio:okio:$okio_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    implementation "com.fasterxml.woodstox:woodstox-core:$woodstox_version"
    implementation "org.slf4j:slf4j-nop:$slf4j" // needed to prevent messages from velocity

    testImplementation "io.mockk:mockk:$mockk_version"
}

tasks.register('createProperties') {
    dependsOn processResources

    inputs.property('version', project.version.toString())

    def outputFile = layout.buildDirectory.file('resources/main/version.properties').get().asFile
    outputs.file(outputFile)

    doLast {
        outputFile.withWriter { w ->
            Properties p = new Properties()
            p.put 'version', inputs.properties['version']
            p.store w, null
        }
        println "Generated version.properties at ${outputFile.absolutePath}"
    }
}

classes {
    dependsOn createProperties
}

tasks.named('jar') {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version
        )
    }
}

java {
    withSourcesJar()
}
